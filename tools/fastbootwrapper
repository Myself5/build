#!/usr/bin/python -B
#
# Copyright (C) 2016 The EFIDroid Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import subprocess
import base64

bldylw='\033[1;33m' # Yellow
txtrst='\033[0m'    # Text Reset

def inputex(msg):
    prompt = msg

    try:
        return raw_input(prompt)
    except:
        return input(prompt)

def fastboot(argv, rawmode, suppressstatus=False, bufmode=False):
    buf = b""
    p = subprocess.Popen(['fastboot'] + argv, stderr=subprocess.PIPE)

    first = True
    for rawline in p.stderr:
        line = rawline.decode()

        if first and line.startswith('...'):
            first = False
            continue

        if line.startswith('(bootloader) '):
            line = line[13:]
        elif rawmode:
            print()

        if suppressstatus:
            if line.startswith('OKAY ['):
                continue
            if line.startswith('finished. total time: '):
                continue

        if bufmode:
            buf+=rawline[13:-1]
            continue

        if rawmode:
            line = line[:-1]

        sys.stdout.write(line)

    if bufmode:
        return buf

def run_shell():
    while True:
        cmd = inputex(bldylw+'Shell> '+txtrst);
        fastboot(['oem', 'shell', cmd], True, True)

def take_screenshot(argv):
    if len(argv)==2:
        fastboot(argv, False)
    else:
        if not len(argv)==4:
            raise('Invalid number of arguments')

        data = fastboot(argv, True, True, True)
        with open(argv[3], 'wb') as f:
            f.write(base64.b64decode(data))

def main(argv):
    rawmode = False
    if len(argv)>=2 and argv[0]=='oem':
        if argv[1]=='last_kmsg':
            rawmode = True
        elif argv[1]=='lk_log':
            rawmode = True
        elif argv[1]=='getnvvar':
            rawmode = True
        elif argv[1]=='screenshot':
            return take_screenshot(argv)
        elif argv[1]=='shell':
            return run_shell()

    elif len(argv)>=1 and argv[0]=='boot-unpatched':
        fastboot(['oem', 'setnvvar', 'fastboot-enable-boot-patch', '0'], False)
        argv = ['boot'] + argv[1:]

    elif len(argv)>=1 and argv[0]=='boot-patched':
        fastboot(['oem', 'setnvvar', 'fastboot-enable-boot-patch', '1'], False)
        argv = ['boot'] + argv[1:]

    fastboot(argv, rawmode)

if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except:
        print('Error: %s' % sys.exc_info()[1])
        raise
