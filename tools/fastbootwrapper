#!/usr/bin/env python
#
# Copyright (C) 2016 The EFIDroid Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import subprocess
import base64

bldred=b'\033[1;31m' # Red
bldgrn=b'\033[1;32m' # Green
bldylw=b'\033[1;33m' # Yellow
bldwht=b'\033[1;37m' # White
txtrst=b'\033[0m'    # Text Reset

fastboot_process = None

def byte2int(val):
    if type(val) is not int:
        val = ord(val)
    return val

def bstartswith(arr, s):
    same = True
    for i in range(0, len(s)):
        a = byte2int(arr[i])
        b = byte2int(s[i])

        if a != b:
            same = False
            break

    return same

def beq(a, b):
    return byte2int(a)==byte2int(b)

def fastboot(argv, rawmode=False, suppressstatus=False, bufmode=False, nocolors=False):
    global fastboot_process
    buf = b""

    # use raw buffer for stdout
    if hasattr(sys.stdout, 'buffer'):
        stdout = sys.stdout.buffer
    else:
        stdout = sys.stdout

    p = subprocess.Popen(['fastboot'] + argv, stderr=subprocess.PIPE)
    fastboot_process = p

    first = True
    lastlinewasempty = True
    for line in p.stderr:
        # supress the initial three points
        if first and bstartswith(line, b'...'):
            first = False
            continue

        if bstartswith(line, b'(bootloader) '):
            # remove the prefix
            line = line[13:]

            # apply log colors
            if not bufmode and not nocolors==True and (len(line)>=2 and beq(line[1], b'/')) and lastlinewasempty:
                level = line[0]

                if beq(level, b'A'): # ALWAYS
                    stdout.write(bldwht)
                elif beq(level, b'E'): # CRITICAL
                    stdout.write(bldred)
                elif beq(level, b'I'): # INFO
                    stdout.write(bldylw)
                elif beq(level, b'D'): # SPEW
                    stdout.write(bldgrn)

                else:
                    stdout.write(bldwht)

        # this is one of the manual newlines in rawmode
        elif rawmode and not bufmode:
            stdout.write(b'\n')

        # suppress status messages
        if suppressstatus:
            if bstartswith(line, b'OKAY ['):
                continue
            if bstartswith(line, b'finished. total time: '):
                continue

        # write data to buffer and continue
        if bufmode:
            buf+=rawline[13:-1]
            continue

        # remove the newline
        if rawmode:
            line = line[:-1]

        lastlinewasempty = len(line)==0
        stdout.write(line)

    if bufmode:
        return buf

    if rawmode:
        stdout.write(b'\n')

    # reset terminal color
    if not nocolors==True:
        stdout.write(txtrst)

def read_b64data(argv, nargs):
    if len(argv)<nargs or len(argv)>nargs+1:
        fastboot(argv, nocolors=True)
    else:
        # get filename
        filename = None
        if len(argv)==nargs+1:
            filename = argv[-1]
            argv = argv[:-1]

        data = fastboot(argv, rawmode=True, suppressstatus=True, bufmode=True, nocolors=True)
        data_decoded = base64.b64decode(data)

        if filename==None:
            sys.stdout.write(data_decoded)
        else:
            with open(filename, 'wb') as f:
                f.write(data_decoded)

def main(argv):
    rawmode = False
    if len(argv)>=2 and argv[0]=='oem':
        if argv[1]=='last_kmsg':
            rawmode = True
        elif argv[1]=='lk_log':
            rawmode = True
        elif argv[1]=='ram-ptable':
            rawmode = True
        elif argv[1]=='getnvvar':
            rawmode = True
        elif argv[1]=='screenshot':
            # oem screenshot ID
            return read_b64data(argv, 3)
        elif argv[1]=='dump-atags':
            # oem dump-atags
            return read_b64data(argv, 2)
        elif argv[1]=='dump-mem':
            # oem dump-mem ADDR LEN
            return read_b64data(argv, 4)

    elif len(argv)>=1 and argv[0]=='boot-unpatched':
        fastboot(['oem', 'setnvvar', 'fastboot-enable-boot-patch', '0'])
        argv = ['boot'] + argv[1:]

    elif len(argv)>=1 and argv[0]=='boot-patched':
        fastboot(['oem', 'setnvvar', 'fastboot-enable-boot-patch', '1'])
        argv = ['boot'] + argv[1:]

    fastboot(argv, rawmode)

if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except:
        # finish the fastboot process so the device doesn't freeze
        if fastboot_process:
            fastboot_process.communicate()

        print('Error: %s' % sys.exc_info()[1])
        raise
