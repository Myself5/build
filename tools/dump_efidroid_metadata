#!/usr/bin/env python
#
# Copyright (C) 2016 The EFIDroid Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# common imports
import sys
import os
import struct
import time
import subprocess
from argparse import ArgumentParser, Action

sys.path.append(os.path.join(os.path.dirname(__file__), '../core'))
from utils import *

def ROUNDUP(number, alignment):
    return (((number) + ((alignment)-1)) & ~((alignment)-1));

def getEFIDroidReleaseVersionString(version):
    s = '';
    ver_0 = ((version&0xff000000)>>24);
    ver_1 = ((version&0x00ff0000)>>16);
    ver_2 = ((version&0x0000ff00)>>8);
    ver_3 = ((version&0x000000ff));

    if ver_3>0:
        s = '.'+str(ver_3) + s;
    if ver_2>0 or len(s)>0:
        s = '.'+str(ver_2) + s;

    s = '.'+str(ver_1) + s;
    s = str(ver_0) + s;

    return s;

class CustomStoreConstAction(Action):
    def __init__(self,
                 option_strings,
                 dest,
                 const,
                 default=None,
                 required=False,
                 help=None,
                 metavar=None):
        super(CustomStoreConstAction, self).__init__(
            option_strings=option_strings,
            dest=dest,
            nargs=0,
            const=const,
            default=default,
            required=required,
            help=help)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, 'printall', False)
        setattr(namespace, self.dest, self.const)

class CustomStoreTrueAction(CustomStoreConstAction):

    def __init__(self,
                 option_strings,
                 dest,
                 default=False,
                 required=False,
                 help=None):
        super(CustomStoreTrueAction, self).__init__(
            option_strings=option_strings,
            dest=dest,
            const=True,
            default=default,
            required=required,
            help=help)

def parse_cmdline():
    parser = ArgumentParser()
    parser.add_argument('--rawheader', help='print raw header', action=CustomStoreTrueAction)
    parser.add_argument('--metadata_version', help='print metdata version', action=CustomStoreTrueAction)
    parser.add_argument('--efidroid_version', help='print EFIDroid version', action=CustomStoreTrueAction)
    parser.add_argument('--timestamp', help='print timestamp', action=CustomStoreTrueAction)
    parser.add_argument('--efispec', help='print UEFI specification version', action=CustomStoreTrueAction)
    parser.add_argument('--devicename', help='print device name', action=CustomStoreTrueAction)
    parser.add_argument('--manifest', help='print repo manifest', action=CustomStoreTrueAction)
    parser.add_argument('--minimal', help='don\t print descriptions or converted data', action='store_true')
    parser.add_argument('bootimg', help='EFIDroid boot image')
    args = parser.parse_args()
    if not hasattr(args, 'printall'):
        setattr(args, 'printall', True)

    return args

def main(argv):
    args = parse_cmdline()

    # oepn file
    f = open(args.bootimg, 'rb')

    # read header
    fmt = '<ccccccccLLLLLLLLL'
    fmtsz = struct.calcsize(fmt)
    header = f.read(fmtsz)
    data = struct.unpack(fmt, header[0:fmtsz])
    magic = ''.join(data[0:8])

    # check magic
    if magic != 'ANDROID!':
        raise Exception('Invalid boot image')

    kernel_size = data[8]
    kernel_addr = data[9]

    ramdisk_size = data[10]
    ramdisk_addr = data[11]

    second_size = data[12]
    second_addr = data[13]

    tags_addr = data[14]
    page_size = data[15]
    dt_size = data[16]

    # calculate offsets
    off_kernel  = page_size;
    off_ramdisk = off_kernel  + ROUNDUP(kernel_size,  page_size);
    off_second  = off_ramdisk + ROUNDUP(ramdisk_size, page_size);
    off_tags    = off_second  + ROUNDUP(second_size,  page_size);
    off_meta    = off_tags    + dt_size

    # read EFIDroid header
    f.seek(off_meta)
    fmt = '<ccccccccLLLLLLLL'
    fmtsz = struct.calcsize(fmt)
    header = f.read(fmtsz)
    data = struct.unpack(fmt, header[0:fmtsz])
    magic = ''.join(data[0:8])
    if args.printall or args.rawheader:
        print(data)

    # check magic
    if magic != 'EFIDroid':
        raise Exception('Invalid metadata')

    # parse data
    ff_version = data[8]
    timestamp = data[9]
    efispec_version = data[10]
    efidroid_version = data[11]
    devicename_size = data[12]
    devicename_off = data[13]
    manifest_size = data[14]
    manifest_off = data[15]

    if args.printall or args.metadata_version:
        if args.minimal:
            print('%u' % (ff_version))
        else:
            print('Metadata version: %u' % (ff_version))
    if args.printall or args.efidroid_version:
        if args.minimal:
            print('%s' % getEFIDroidReleaseVersionString(efidroid_version))
        else:
            print('EFIDroid version: %s' % getEFIDroidReleaseVersionString(efidroid_version))
    if args.printall or args.timestamp:
        if args.minimal:
            print('%u' % timestamp)
        else:
            print('Build time: %s (%u)' % (time.ctime(timestamp), timestamp))
    if args.printall or args.efispec:
        if args.minimal:
            print('%u.%u' % ((efispec_version>>16)&0xffff, efispec_version&0xffff))
        else:
            print('EFI Specification: %u.%u' % ((efispec_version>>16)&0xffff, efispec_version&0xffff))

    # get devicename
    f.seek(off_meta+devicename_off)
    devicename = f.read(devicename_size)
    if args.printall or args.devicename:
        if args.minimal:
            print('%s' % (devicename))
        else:
            print('Device: %s' % (devicename))

    # get manifest
    f.seek(off_meta+manifest_off)
    manifest = f.read(manifest_size)
    if args.printall or args.manifest:
        print('')
        print('========== Manifest ==========')
        print(manifest)
    
    f.close()

if __name__ == "__main__":
    runmain(main)
