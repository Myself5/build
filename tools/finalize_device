#!/usr/bin/python -B

# common imports
import os.path
import sys
import glob
import os
import subprocess
import os
import re
from sys import stdin

# compatibility imports
try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO

try:
    import ConfigParser
except ImportError:
    import configparser as ConfigParser

# color codes
txtblk='\033[0;30m' # Black - Regular
txtred='\033[0;31m' # Red
txtgrn='\033[0;32m' # Green
txtylw='\033[0;33m' # Yellow
txtblu='\033[0;34m' # Blue
txtpur='\033[0;35m' # Purple
txtcyn='\033[0;36m' # Cyan
txtwht='\033[0;37m' # White
bldblk='\033[1;30m' # Black - Bold
bldred='\033[1;31m' # Red
bldgrn='\033[1;32m' # Green
bldylw='\033[1;33m' # Yellow
bldblu='\033[1;34m' # Blue
bldpur='\033[1;35m' # Purple
bldcyn='\033[1;36m' # Cyan
bldwht='\033[1;37m' # White
unkblk='\033[4;30m' # Black - Underline
undred='\033[4;31m' # Red
undgrn='\033[4;32m' # Green
undylw='\033[4;33m' # Yellow
undblu='\033[4;34m' # Blue
undpur='\033[4;35m' # Purple
undcyn='\033[4;36m' # Cyan
undwht='\033[4;37m' # White
bakblk='\033[40m'   # Black - Background
bakred='\033[41m'   # Red
bakgrn='\033[42m'   # Green
bakylw='\033[43m'   # Yellow
bakblu='\033[44m'   # Blue
bakpur='\033[45m'   # Purple
bakcyn='\033[46m'   # Cyan
bakwht='\033[47m'   # White
txtrst='\033[0m'    # Text Reset

def pr_error(*args):
    print(bldred+" ".join(map(str,args))+txtrst)
def pr_info(*args):
    print(bldwht+" ".join(map(str,args))+txtrst)
def pr_warning(*args):
    print(bldylw+" ".join(map(str,args))+txtrst)
def pr_notice(*args):
    print(bldcyn+" ".join(map(str,args))+txtrst)
def pr_alert(*args):
    print(bldgrn+" ".join(map(str,args))+txtrst)

def inputex(msg):
    return input(bldylw+msg+txtrst)

def main(argv):
    # check arguments
    if not len(argv) == 1:
        raise Exception('Invalid number of arguments')

    # get devicedir
    devicedir = argv[0]
    if not os.path.isdir(devicedir):
        raise Exception('Can\'t find '+devicedir)

    # create configparser
    config = ConfigParser.RawConfigParser(allow_no_value=True)
    config.optionxform = str
    config.read(devicedir+'/config.ini')

    # parse bootimages
    p = subprocess.Popen(['fastboot', 'oem', 'findbootimages'], stderr=subprocess.PIPE)
    lines = p.stderr.read().splitlines()

    count = -1
    found_lk_base = False
    found_edk2_base = False
    for line in lines:
        count+=1

        if line.decode().startswith('(bootloader) \tID:5(appsbl)'):
            cols = lines[count+1].split()
            dst = int(cols[3].decode().split(':')[1], 16)

            pr_notice('updating LK_BASE to 0x%08x' % (dst))
            config.set('variables', 'LK_BASE', '0x%08x'%dst)
            found_lk_base = True
            break

    # parse ram-ptable
    p = subprocess.Popen(['fastboot', 'oem', 'ram-ptable'], stderr=subprocess.PIPE)
    lines = p.stderr.read().splitlines()

    count = -1
    highestaddr = -1
    for line in lines:
        count+=1
        if count <= 1:
            continue

        cols = line.decode().split('\t')
        if len(cols) != 8:
            continue

        ptype = cols[-2]
        pcat = cols[-4]
        prange = cols[1].split('-')
        prange[0] = int(prange[0], 16)
        prange[1] = int(prange[1], 16)
        if not prange[0]==0 and prange[1]==0:
            prange[1] = 0xffffffff + 1

        if pcat=='sdram':
            if prange[1]>highestaddr:
                highestaddr = prange[1]

        if ptype=='appsbl' and not found_lk_base:
            pr_notice('updating LK_BASE to 0x%08x' % (prange[0]))
            config.set('variables', 'LK_BASE', '0x%08x'%prange[0])
            found_lk_base = True

    if not highestaddr == -1:
        edk2size = 32*1024*1024
        edk2base = highestaddr - edk2size
        pr_notice('updating EDK2_BASE to 0x%08x (size=0x%08x)' % (edk2base, edk2size))
        config.set('variables', 'EDK2_BASE', '0x%08x'%edk2base);
        config.set('variables', 'DRAM_SIZE', '0x%08x'%edk2size);
        found_edk2_base = True

    if not found_lk_base or not found_edk2_base:
        raise Exception('Couldn\'t find all the needed information')

    # write config
    with open(devicedir+'/config.ini', 'w') as configfile:
        config.write(configfile)
    

if __name__ == "__main__":
    try:
        main(sys.argv[1:])
    except:
        pr_error('Error: %s' % sys.exc_info()[1])
        raise
