#!/usr/bin/env python
#
# Copyright (C) 2016 The EFIDroid Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# common imports
import os.path
import sys
import glob
import os
import subprocess
import os
import re
from sys import stdin
from shutil import copyfile

sys.path.append(os.path.join(os.path.dirname(__file__), '../core'))
from utils import *

# compatibility imports
try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO

try:
    import ConfigParser
except ImportError:
    import configparser as ConfigParser

OUT = 'out/tmp/'
UNPACKBOOTIMG = 'build/tools/unpackbootimg'
BOOTIMGPREFIX = None

def file2str(filename):
    data = None
    with open(filename, 'r') as f:
        data=f.read().replace('\n', '')

    return data

def getbootimgarg(name):
    global BOOTIMGPREFIX
    data = None
    with open(BOOTIMGPREFIX+name, 'r') as f:
        data=f.read().replace('\n', '')

    return data

socs = {
    'qcom/LA.BF64' : [
        'msm7627a',
        'apq8084',
        'msm8226',
        'msm8610',
        'msm8660',
        'msm8960',
        'msm8974',
        'msm8994',
    ],

    'qcom/LA.BR' : [
        'msm8909',
        'msm8916',
        'msm8952',
    ],

    'qcom/LA.HB' : [
        'msm8996',
    ],
}

def target2branch(target):
    for branch in socs:
        for name in socs[branch]:
            if name==target:
                return branch

    return None

def main(argv):
    global BOOTIMGPREFIX

    # check arguments
    if not len(argv) == 1:
        raise Exception('Invalid number of arguments')

    bootimg = argv[0]
    if not os.path.isfile(bootimg):
        raise Exception('Can\'t find '+bootimg)

    # get devicename
    devicename = inputex('Device name (vendor/codename): ')
    tmp = devicename.split('/')
    if len(tmp) != 2:
        raise Exception('Invalid device name: '+devicename)

    # get device description
    devicedesc = inputex('Device Description (i.e. Moto E): ')

    lcd_density = inputex('LCD Density: ')

    # get available targets
    targets = []
    for branch in socs:
        for name in socs[branch]:
            targets.append(name)

    # print available targets
    pr_warning('Available targets:')
    i = 0
    while i<len(targets):
        target = targets[i]
        part = targets[i:]

        # ensure that 'part' has at least 4 elements
        while len(part)<4:
            part.append('')

        print("{: >24} {: >24} {: >24} {: >24}".format(*part))

        i+=4

    # get target
    lktarget = None
    while not lktarget in targets:
        lktarget = inputex('LK Target: ')
        if not lktarget in targets:
            pr_error(lktarget+' is not a valid target')

    # get branch
    branch = target2branch(lktarget)
    if not branch:
        raise Exception('can\'t find branch for target %s' % (branch))

    # create out directory
    try:
        os.makedirs(OUT)
    except:
        pass

    # create devicedir directory
    devicedir = 'device/'+devicename;
    try:
        os.makedirs(devicedir)
    except:
        pass

    # unpack boot image
    rc = subprocess.call([UNPACKBOOTIMG, '-i', bootimg, '-o', OUT], stdout=subprocess.PIPE)
    if rc != 0:
        raise Exception('unpackbootimg error: %u' % (rc))
    
    BOOTIMGPREFIX = OUT+'/'+os.path.basename(bootimg)+'-'

    # create configparser
    config = ConfigParser.RawConfigParser(allow_no_value=True)
    config.optionxform = str
    config.add_section('variables')

    # get base and offsets
    base = int(getbootimgarg('base'), 16)
    kernel_offset = int(getbootimgarg('kernel_offset'), 16)
    ramdisk_offset = int(getbootimgarg('ramdisk_offset'), 16)
    second_offset = int(getbootimgarg('second_offset'), 16)
    tags_offset = int(getbootimgarg('tags_offset'), 16)

    # generate mkbootimg args
    additionalargs = ''
    if kernel_offset  != 0x00008000:
        additionalargs += ('--kernel_offset 0x%08x' % kernel_offset)
    if ramdisk_offset != 0x01000000:
        additionalargs += (' --ramdisk_offset 0x%08x' % ramdisk_offset)
    if second_offset  != 0x00f00000:
        additionalargs += (' --second_offset 0x%08x' % second_offset)
    if tags_offset    != 0x00000100:
        additionalargs += (' --tags_offset 0x%08x' % tags_offset)

    config.set('variables', 'DEVICE_NAME', devicedesc);
    config.set('variables', 'LK_TARGET', lktarget);
    config.set('variables', 'LK_BASE', "0x%08x" % (base+kernel_offset));
    config.set('variables', 'LK_SOURCE', branch);
    config.set('variables', 'BOOTIMG_BASE', '0x%08x' % (base));
    config.set('variables', 'BOOTIMG_PAGESIZE', getbootimgarg('pagesize'));
    if additionalargs != '':
        config.set('variables', 'BOOTIMG_ADDITIONAL_ARGS', additionalargs);
    config.set('variables', 'LCD_DENSITY', lcd_density);

    if os.path.isfile(BOOTIMGPREFIX+'zImage.fdt'):
        copyfile(BOOTIMGPREFIX+'zImage.fdt', devicedir+'/fdt.img')
        config.set('variables', 'BOOTIMG_APPENDED_FDT', '$(DEVICE_DIR)/fdt.img');

    if os.path.getsize(BOOTIMGPREFIX+'dt')>0:
        if os.path.isfile(BOOTIMGPREFIX+'dt.unlz4'):
            copyfile(BOOTIMGPREFIX+'dt.unlz4', devicedir+'/dt.img')
            config.set('variables', 'BOOTIMG_DT_COMPRESSION', 'lz4');
        else:
            copyfile(BOOTIMGPREFIX+'dt', devicedir+'/dt.img')

        config.set('variables', 'BOOTIMG_DT', '$(DEVICE_DIR)/dt.img');

    # write config
    with open(devicedir+'/config.ini', 'w') as configfile:
        config.write(configfile)

    # write dependencies
    with open(devicedir+'/efidroid.dependencies', 'w') as f:
        f.write('[\n  {\n')

        f.write('    "repository": "bootloader_lk",\n')
        f.write('    "target_path": "bootloader/lk/%s",\n' % branch)
        f.write('    "branch": "%s"\n' % branch)

        f.write('  }\n]\n')

    copyfile('build/templates/fstab.multiboot_template', devicedir+'/fstab.multiboot')
    copyfile('build/templates/lk_inc.template.mk', devicedir+'/lk_inc.mk')
    

if __name__ == "__main__":
    runmain(main)
