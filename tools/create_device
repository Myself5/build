#!/usr/bin/python -B

# common imports
import os.path
import sys
import glob
import os
import subprocess
import os
import re
from sys import stdin
from shutil import copyfile

sys.path.append(os.path.join(os.path.dirname(__file__), '../core'))
from utils import *

# compatibility imports
try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO

try:
    import ConfigParser
except ImportError:
    import configparser as ConfigParser

OUT = 'out/tmp/'
UNPACKBOOTIMG = 'out/host/mkbootimg/unpackbootimg'
BOOTIMGPREFIX = None

def inputex(msg):
    prompt = bldylw+msg+txtrst

    try:
        return raw_input(prompt)
    except:
        return input(prompt)

def file2str(filename):
    data = None
    with open(filename, 'r') as f:
        data=f.read().replace('\n', '')

    return data

def getbootimgarg(name):
    global BOOTIMGPREFIX
    data = None
    with open(BOOTIMGPREFIX+name, 'r') as f:
        data=f.read().replace('\n', '')

    return data

def main(argv):
    global BOOTIMGPREFIX

    # check arguments
    if not len(argv) == 1:
        raise Exception('Invalid number of arguments')

    bootimg = argv[0]
    if not os.path.isfile(bootimg):
        raise Exception('Can\'t find '+bootimg)

    # build mkbootimg
    if not os.path.isfile(UNPACKBOOTIMG):
        subprocess.call(["make", "host_mkbootimg"])
        if not os.path.isfile(UNPACKBOOTIMG):
            raise Exception('can\'t find unpackbootimg')

    # get devicename
    devicename = inputex('Device name (vendor/codename): ')
    tmp = devicename.split('/')
    if len(tmp) != 2:
        raise Exception('Invalid device name: '+devicename)

    # get device description
    devicedesc = inputex('Device Description (i.e. Moto E): ')

    lcd_density = inputex('LCD Density: ')

    # get available targets
    targets = []
    for filename in os.listdir('bootloader/lk/common/LA.BF64/project'):
        if not re.match('msm.*\.mk|mdm.*\.mk', filename):
            continue
        name = os.path.basename(filename)
        name = os.path.splitext(name)[0]
        targets.append(name)

    # print available targets
    pr_warning('Available targets:')
    for i in range(0, len(targets)):
        target = targets[i]
        part = targets[i:]
        while len(part)<4:
            part.append('')
        print("{: >24} {: >24} {: >24} {: >24}".format(*part))

    # get target
    lktarget = None
    while not lktarget in targets:
        lktarget = inputex('LK Target: ')
        if not lktarget in targets:
            pr_error(lktarget+' is not a valid target')

    # create out directory
    try:
        os.makedirs(OUT)
    except:
        pass

    # create devicedir directory
    devicedir = 'device/'+devicename;
    try:
        os.makedirs(devicedir)
    except:
        pass

    # unpack boot image
    subprocess.call([UNPACKBOOTIMG, '-i', bootimg, '-o', OUT], stdout=subprocess.PIPE)
    
    BOOTIMGPREFIX = OUT+'/'+os.path.basename(bootimg)+'-'

    # create configparser
    config = ConfigParser.RawConfigParser(allow_no_value=True)
    config.optionxform = str
    config.add_section('variables')

    config.set('variables', 'DEVICE_NAME', devicedesc);
    config.set('variables', 'LK_TARGET', lktarget);
    config.set('variables', 'LK_BASE', "0x%08x" % (int(getbootimgarg('base'), 16)+0x8000));
    config.set('variables', 'BOOTIMG_BASE', '0x'+getbootimgarg('base'));
    config.set('variables', 'BOOTIMG_PAGESIZE', getbootimgarg('pagesize'));
    config.set('variables', 'BOOTIMG_ADDITIONAL_ARGS', '--ramdisk_offset 0x'+getbootimgarg('ramdisk_offset')+' --tags_offset 0x'+getbootimgarg('tags_offset'));
    config.set('variables', 'LCD_DENSITY', lcd_density);

    if os.path.getsize(BOOTIMGPREFIX+'dt')>0:
        copyfile(BOOTIMGPREFIX+'dt', devicedir+'/dt.img')
        config.set('variables', 'BOOTIMG_DT', '$(DEVICE_DIR)/dt.img');

    # write config
    with open(devicedir+'/config.ini', 'w') as configfile:
        config.write(configfile)

    copyfile('build/tools/fstab.multiboot_template', devicedir+'/fstab.multiboot')
    copyfile('build/tools/lk_inc.template.mk', devicedir+'/lk_inc.mk')
    

if __name__ == "__main__":
    try:
        main(sys.argv[1:])
    except:
        pr_error('Error: %s' % sys.exc_info()[1])
        raise
