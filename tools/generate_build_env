#!/usr/bin/env python
#
# Copyright (C) 2016 The EFIDroid Project
#
# Licensed under the Apache License, Version 2.0 (the 'License');
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an 'AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# common imports
import os.path
import sys
import os
import argparse
import subprocess

sys.path.append(os.path.join(os.path.dirname(__file__), '../core'))
from utils import *

def inputex(msg):
    prompt = bldylw+msg+txtrst

    try:
        return raw_input(prompt)
    except:
        return input(prompt)

def inputchoice(msg, choices):
    print(bldylw+msg+txtrst)

    for idx,choice in enumerate(choices):
        print('%u) %s' % (idx+1, choice))

    num = inputex('> ')

    return choices[int(num)-1]

def get_gcc_archs():
    archs = []

    p = subprocess.Popen(['gcc', '-dumpmachine'], stdout=subprocess.PIPE)
    machine = p.communicate()[0]
    if p.returncode != 0:
        pr_fatal('can\'t check native gcc version')
    native_arch = machine.split('-')[0]

    if native_arch=='i686':
        archs += ['x86']
    if native_arch=='x86_64':
        archs += ['x86']
        archs += ['x86_64']

    return archs

def main(argv):
    top = os.environ['TOP']
    toolchain_none = None
    toolchain_linux = None
    deviceid = None
    buildtype = None
    architecture = None

    # check arguments
    if not len(argv) >= 1:
        raise Exception('Invalid number of arguments')
    outfile = argv[0]

    # parse args
    parser = argparse.ArgumentParser(prog='lunch')
    parser.add_argument('--toolchain', dest='toolchain', action='store_const', const=True,
                        help='select toolchain')
    parser.add_argument('--arch', dest='arch', action='store_const', const=True,
                        help='select architecture')
    parser.add_argument('--online', dest='online', action='store_const', const=True,
                        help='include devices from EFIDroid repository')
    args = parser.parse_args(argv[1:])

    # toolchain

    if args.toolchain:
        toolchain_none = inputex('gcc-none toolchain: ')
        toolchain_linux = inputex('gcc-linux toolchain: ')

    elif args.arch:
        archs = ['arm']
        archs += get_gcc_archs()

        architecture = inputchoice('Architecture: ', archs)

    else:
        # get device list
        devices = []
        if os.path.exists(top+'/device'):
            for vendor in os.listdir(top+'/device'):
                for device in os.listdir(top+'/device/'+vendor):
                    devices += [vendor+'/'+device]

        if args.online:
            p = subprocess.Popen(['git', 'ls-remote', '--heads', 'https://github.com/efidroid/device.git'], stdout=subprocess.PIPE)
            data = p.communicate()[0]
            if p.returncode != 0:
                pr_fatal('can\'t get online devices')

            for head in data.splitlines():
                codename = head.split('refs/heads/')[1]
                if not codename in devices:
                    devices += [codename]

        devices += ['CUSTOM']

        # device
        deviceid = inputchoice('Device name: ', devices)
        if deviceid==devices[-1]:
            deviceid = inputex('Device name (vendor/codename): ')
        
        # build type
        buildtype = inputchoice('build type: ', ['RELEASE', 'DEBUG', 'USERDEBUG'])

    # write config
    with open(outfile, 'w') as f:
        if not toolchain_none == None:
            f.write('export EFIDROID_TOOLCHAIN_NAME_GCC_NONE='+toolchain_none+'\n')
        if not toolchain_linux == None:
            f.write('export EFIDROID_TOOLCHAIN_NAME_GCC_LINUX='+toolchain_linux+'\n')

        if not architecture == None:
            f.write('export EFIDROID_TARGET_ARCH='+architecture+'\n')

        if not deviceid == None:
            f.write('export DEVICEID='+deviceid+'\n')
        if not buildtype == None:
            f.write('export BUILDTYPE='+buildtype+'\n')

if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except SystemExit:
        sys.exit(sys.exc_info()[1])
    except:
        pr_error('Error: %s' % sys.exc_info()[1])
        raise
