#!/usr/bin/env python
#
# Copyright (C) 2016 The EFIDroid Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import os
import json
import subprocess

SCRIPTDIR = os.path.dirname(os.path.realpath(__file__))

sys.path.append(os.path.join(SCRIPTDIR, '../core'))
from utils import *

def get_token():
    with open(os.getenv('TOP')+'/prebuilts/release_token') as f:
        return f.read().strip()

TOKEN = get_token()

def prettify_json(data):
    return json.dumps(data, sort_keys=True, indent=2, separators=(',', ': '))

def send_api_request(args, print_stderr=False):
    with open(os.devnull, 'w') as DEVNULL:
        stderr = None
        if not print_stderr:
            stderr = DEVNULL

        # run curl
        p = subprocess.Popen(['curl', '-H', 'Authorization: token '+TOKEN] + args, stdout=subprocess.PIPE, stderr=stderr)
        data = p.stdout.read()
        p.communicate()

        # check return code
        if p.returncode:
            raise Exception('curl returned: %d' % p.returncode)

        # decode json
        data = json.loads(data)

        # check for API errors
        if 'errors' in data:
            pr_error(prettify_json(data))
            raise Exception('API error')

        return data

def get_upload_url():
    data = send_api_request(['https://api.github.com/repos/efidroid/files/releases/tags/builds'])
    url = data['upload_url']
    url = url[0:url.index('{')]
    return url

def upload_release(upload_url, filename):
    data = send_api_request([
        '-H', 'Accept: application/vnd.github.manifold-preview',
        '-H', 'Content-Type: application/zip',
        '--data-binary', '@'+filename,
        upload_url+'?name='+os.path.basename(filename)
    ], print_stderr=True)

    return data['browser_download_url']

def main(argv):
    releasedir = argv[0]
    zipname = argv[1]
    upload_url = get_upload_url()

    # get timestamp
    p = subprocess.Popen([SCRIPTDIR+'/dump_efidroid_metadata', '--minimal', '--timestamp', os.getenv('DEVICE_OUT')+'/uefi_boot.img'], stdout=subprocess.PIPE)
    timestamp = int(p.stdout.read().strip())

    # read info.jsom
    with open(releasedir+'/info.json') as f:
        data = json.load(f)

    # upload file
    fileurl = upload_release(upload_url, zipname)

    # append new release
    data.append({
        'file': fileurl,
        'timestamp': timestamp
    })

    # update info.json
    with open(releasedir+'/info.json', 'w+') as f:
        f.write(prettify_json(data))

if __name__ == "__main__":
    runmain(main)
